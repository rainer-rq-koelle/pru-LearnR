[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PRU LearnR - Pedestrian to Novice Series",
    "section": "",
    "text": "Preface\nThis quarto-book was developed with the help of many colleagues. It builds on the material presented and discussed during the LearnR sessions at EUROCONTROL.\nThis online book/resource is work-in-progress and represents a trial-run of the use of {webr} to allow for interactive content in online books.\nThis skeleton was setup for the recap on {ggplot2} and a follow-up session on recapping more {dplyr} and {ggplot2} stuff, and then venturing into {gt}. It is planned to add the material from the first sessions as we go (and time permits).\nWhile this might be disappointing for a first interaction. This could be the basis for transferring all our sessions into this format and support future “pedestrians” to get achieve the “novice” level … before embarking to become a “R/RStudio ecosystem ninja/jedi”!\nMay the forRce be with you!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Test chapter",
    "section": "",
    "text": "When accessing the (book) page, you will see a WEBR STATUS loading symbol at the top of the page. This loads some of the required (underlying packages for this page). It may take a few seconds when you access this for the first time (and your browser has not yet cashed and downloaded the required package).\nBut it should be reasonable fast.\nConceptually, once you see the “green” Ready! label. All prep work is done and the ensuing code windows work.\nGive it a try … and run the code!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Test chapter</span>"
    ]
  },
  {
    "objectID": "dummy01-ggplot.html",
    "href": "dummy01-ggplot.html",
    "title": "2  Visualisation - Plotting in R",
    "section": "",
    "text": "2.1 Overview\nVisualisations form a key component of our deliverables.\nThere are several plotting “systems” in R. This session will focus on plotting with {ggplot2} after introducing some base-R graphic commands. The latter might come handy for a quick orientation or initial data exploration. However, {ggplot2} offers more flexibility and extensibility when we want to produce publication-ready plots.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualisation - Plotting in R</span>"
    ]
  },
  {
    "objectID": "dummy01-ggplot.html#base-r-plotting",
    "href": "dummy01-ggplot.html#base-r-plotting",
    "title": "2  Visualisation - Plotting in R",
    "section": "2.2 base-R plotting",
    "text": "2.2 base-R plotting\nBase-R uses the generic plot() function (and many objects have implemented a plot-function). So let’s explore associations in the built-in iris dataset.\nTo be frank, plot() works here as it is implemented as a method for a R-object (i.e. the iris dataset).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nMore generically, plot(x,y) accepts vectors. A simple scatter-plot of numerical values can then be called with the following commands.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise\n\n\n\nThe mtcars dataset is a built-in dataset in BaseR. It provides information on a series of car models.\nMake a scatter plot with (horsepower) hp on the x axis and (weight of the car) wt on the y axis. Do not worry about axis labels, etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYour result should look like the plot below\n\n\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n# plot wt versus hp of the mtcars dataset in BaseR\n# the plot function uses vectors \n# Note 1: you recall how to access vectors with the $ notation, don't you?\n# Note 2: x = ... and y = ... is verbose. \n# Recall however, position matters in function calls.\n# Test this by swapping around x any y.\n\nplot(x = mtcars$wt, y = mtcars$hp)\n\n\n\n\n\n\n\n# you may also assign the vectors outside the plot() call, e.g.\nmy_x &lt;- mtcars$wt\nmy_y &lt;- mtcars$hp\nplot(x = my_x, y = my_y)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualisation - Plotting in R</span>"
    ]
  },
  {
    "objectID": "dummy01-ggplot.html#univariate-plots---get-a-feel-for-the-data",
    "href": "dummy01-ggplot.html#univariate-plots---get-a-feel-for-the-data",
    "title": "2  Visualisation - Plotting in R",
    "section": "2.3 Univariate plots - Get a feel for the data",
    "text": "2.3 Univariate plots - Get a feel for the data\n\n2.3.1 Base-R histogram\nIt is often useful to get a feel for the distribution of variables/data values. Here a histogram or boxplot are useful exploratory helpers.\nBefore constructing a publication ready (gg)plot (c.f. next section), the base-R variants may help.\nPlease recall: base-R plotting works with vectors!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.3.2 Base-R boxplot\n\n\n\n\n\n\nExercise\n\n\n\nAnother way of showing the distribution of values are so-called boxplots. The respective base-R call is boxplot(x).\nUsing the built-in mtcars dataset, create a boxplot of horsepower hp and then a boxplot for the variable weight wt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYour result should look like the plot below\n\n\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n# boxplot of weight variable\nboxplot(x = mtcars$wt)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualisation - Plotting in R</span>"
    ]
  },
  {
    "objectID": "dummy01-ggplot.html#plotting-with-ggplot2",
    "href": "dummy01-ggplot.html#plotting-with-ggplot2",
    "title": "2  Visualisation - Plotting in R",
    "section": "2.4 Plotting with {ggplot2}",
    "text": "2.4 Plotting with {ggplot2}\n{ggplot2} is a popular plotting package of the {tidyverse}-family. The package implements the grammar of graphics which offers a conceptual framework to “construct” plots.\nThis allows for the generation of good plots quickly … that can then be iteratively “beautified” and made publication ready.\n\n\n\n\n\n\nThings to know/recall\n\n\n\nThe underlying framework (i.e. grammar of graphics) considers constructing a visualisation as a series of composeable elements.\nThis allows for the creation of “thousands of visualisation” instead of being restricted to a defined set of graphs in other software packages/apps.\n\n\nNote: As you will learn in the following {ggplot2} works extremely well with a tibble/dataframe in the long format (recall: tidy data).\n\n2.4.1 {ggplot2} Basics\n\nas usual, before working with a package, one has to load the package (and some data)\nplease recall: if your setup has not yet the library available, you can download it with the command install.packages(\"ggplot2\").\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTo build a plot using {ggplot2} we start with the ggplot() function\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nggplot() creates a base ggplot object, think about a painter’s blank canvas. On this canvas we can then add layer by layer to establish our picture\nggplot() accepts a series of optional arguments for information to be shared across different components of the plot\nThe two main arguments we typically use here are\n\ndata - which is the name of the data frame we are working with, so mtcars\nmapping - which describes which columns of the data are used for different aspects of the plot\n\nWe create a mapping by using the aesthetic function aes() linking columns (~ vectors within our dataframe) to pieces of the plot\n\nWe typically start with telling ggplot() what values should be on the x and y axes\n\n\nLet’s plot the relationship betwen the horsepower hp of the mtcars dataset and the fuel consumption, mile-per-gallon mpg.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis doesn’t create a final figure. This time the blank canvas from above is augmented with some additional (aesthetic) information on default values for the data and mapped columns (e.g. a range of the x-axis is established that covers the data points in mpg, labels for the x- and y-axis are added)\nTo show (aka add) data to the plot, we add a so-called geometric layer (or geometry)\nggplot2 uses the + operator to add a new layer\nas a reasonable starting point for any bivariate (two variable) plot, we want to establish a scatter plot. The ggplot2 geometry for this is geom_point()\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTo change things about the presentation of the layer we can pass additional arguments to the geom calls.\n\nFor example, we can set/change\n\nthe size argument of the points, let’s set it to 3\nthe color argument of the points, we’ll set it to \"blue\"\nthe transparency of the points, i.e. alpha value, let’s pick something semi-transparent between 0-100%, i.e. let’s set it to 0.5\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExercise\n\n\n\nTry changing these values to make the graph look like you want it to. Explore how the graph changes when setting different values for size, color, or alpha.\nFor example * set size to 1.5 or color to “lightgreen”. * Remove one/some of these arguments (e.g. alpha).\nWhat happens, when you remove size = 1.5?\nP.S. Do not forget to hit Run Code after your changes ;)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n2.4.2 First improvements - towards production ready graphs\nWhile ggplot2 implements the grammar of graphics and speaks about aesthetics … the default color-settings, including the “characteristic” background are – at least – cringeworthy (in the humble opinion of the editor).\nAbove serves as a good basic plot. To use the graph in a report of presentation the following might help:\n\nmake the axis-labels “human-readable”, and possibly add a title\nchoose another background\n\nLabels serve as a documentation for your graph and can be added with the labs() function (layer). labs() accepts arguments for * title, subtitle, and caption * the axes, i.e. x and y. * you provide the desired string, e.g. \"Miles per Gallon\" to the argument\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.4.3 Grouping\n\nGroup on a single graph\nLook at influence of experimental treatment\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry changing the above code to color based on the gear\nWe can also split each group into different subplots (known as facets)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry changing this code to create a subplot for each value in vs with points of size 4\n\n\n\n\n\n\n\nExercise\n\n\n\nMake a scatter plot with hp on the x axis and wt on the y axis. Label the x axis “Horse Power” and the y axis “Weight”. Make one subplot for each value in gear.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYour result should look like the plot below\n\n\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution Code\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x = hp, y = wt)) +\n  geom_point() +\n  labs(x = \"Horse Power\", y = \"Weight\") +\n  facet_wrap(~gear)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Visualisation - Plotting in R</span>"
    ]
  },
  {
    "objectID": "gt2.html",
    "href": "gt2.html",
    "title": "3  Publication-Ready Tables in R",
    "section": "",
    "text": "3.1 Overview\nRMarkdown has a primitive support for tables. This works fine during the development. I save showcasing the native RMarkdown syntax - just cumbersome for tables of more than a few rows.\nHowever, publications deserve better.\n# show the first 10 rows of the mtcars dataset\nmtcars[1:10,]\n\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nThere exists a variety of packages that help with the presentation of tables. Some of these table-packages are\nThe {gt} package conceptualises tables composed of a cohesive set of table parts. Similar to {ggplot}’s grammar-of-graphics, {gt} allows for the construction of a wide variety of useful tables based on these parts.\nThese include the table header, the stub, the column labels and spanner column labels, the table body, and the table footer.\nknitr::include_graphics(\"./figures/gt_parts_of_a_table.png\")\n\n\n\n\n\n\n\nFigure 3.1: {gt} parts of a table",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication-Ready Tables in R</span>"
    ]
  },
  {
    "objectID": "gt2.html#overview",
    "href": "gt2.html#overview",
    "title": "3  Publication-Ready Tables in R",
    "section": "",
    "text": "{kable} and its supporting package {kableExtra} - for pdf output\n{flextable} - offered good output for html, pdf, and docx\n{gt} a new(er)kid on the block and fitting nicely into the {tidyverse} ecosystem",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication-Ready Tables in R</span>"
    ]
  },
  {
    "objectID": "gt2.html#getting-goint-with-gt",
    "href": "gt2.html#getting-goint-with-gt",
    "title": "3  Publication-Ready Tables in R",
    "section": "3.2 Getting goint with {gt}",
    "text": "3.2 Getting goint with {gt}\n\nto work with {gt}, we first load the library\nthe key table function is gt() which allows to set a couple of arguments (if needed)\n\nNote: mtcars stores the model names in a special manner. To make this work, we first create a separate model column.\n\nlibrary(dplyr)\nlibrary(gt)\n\n# prepare the dataset - move the model names into separate column\n# force this new column to the beginning (before the 1st column)\nmy_cars &lt;- mtcars[1:10,] |&gt; \n  mutate(models = rownames(mtcars[1:10,]), .before = 1)\n\n# work with {gt}\nmy_cars |&gt; \n  gt()\n\n\n\n\n\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\n\n\n\n\n\n\n3.2.1 Organising the table content\nOccassionally, there is a need to organise subsets of the columns.\nThis could be done as arguments of the gt() call.\nAssuming our data has respective grouping variables, one can set these with gt(rowname_col = ..., groupname_col = ...)\nFor example we can group our data set according to the number of gears. This inserts the grouping into the table presentation, i.e. there are grouping rows separating the different groups.\n\nmy_cars |&gt; \n  gt(\n    groupname_col = \"gear\"\n  )\n\n\n\n\n\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ncarb\n\n\n\n\n4\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n1\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n\n\n3\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n4\n\n\n\n\n\n\n\n\n\n3.2.2 Labelling Groups of columns – spanner\nDependent on the data, one can introduce additional column (group) labels. tab_spanner() allows to combine columns under a separate (group) label. It accepts the label and columns argument. We can use standard dplyr-indexing to group columns. Note that when using a named vector, the sequence of columns might be influenced. Below the carb column is shifted.\nNote: use a separate tab_spanner() per desired grouping.\n\nmy_cars |&gt; \n  gt() |&gt; \n  tab_spanner(label = \"first block\", columns = mpg:drat) |&gt; \n  tab_spanner(label = \"other block\", columns = c(\"qsec\",\"vs\",\"carb\"))\n\n\n\n\n\n\n\nmodels\nfirst block\nwt\nother block\nam\ngear\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nqsec\nvs\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n4\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n4\n1\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n2\n0\n3\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n1\n0\n3\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n4\n0\n3\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n2\n0\n4\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n2\n0\n4\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n4\n0\n4\n\n\n\n\n\n\n\n\n\n3.2.3 Adding title, subtitle, and footnotes\n\nmy_cars |&gt; \n  gt() |&gt; \n  tab_header(\n     title = \"Title of my_cars table\"\n    ,subtitle = \"Any useful subtitle information can go here\" \n    )\n\n\n\n\n\n\n\nTitle of my_cars table\n\n\nAny useful subtitle information can go here\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\n\n\n\n\n\nNext, we want to set a footnote. Here we can differentiate between\n\nlazy table footnotes (that should be sourcenotes ;) )\n{gt} sourcenotes (optional) to account for references\n{gt} footnotes to cross-reference table cells\n\n\nmy_cars |&gt; \n  gt() |&gt; \n  tab_footnote(\n    footnote = \"any footnote text\"  # ignoring the location argument\n  ) |&gt; \n  tab_source_note(\n    source_note = \"a source note does not expect a reference to any cell body\"\n  )\n\n\n\n\n  \n    \n    \n      models\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    Mazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n    Mazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n    Datsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n    Hornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n    Hornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n    Valiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n    Duster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n    Merc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n    Merc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n    Merc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n  \n  \n    \n      a source note does not expect a reference to any cell body\n    \n  \n  \n    \n       any footnote text\n    \n  \n\n\n\n\nThe power of footnotes() is that it can be combined with a reference to any part of the table.\nThere exists various helper for the referencing. In most cases, we want to reference one (or several) table cells with cells_body().\ncells_body()\n\nexpects a columns and/or rows argument\none could use dplyr-indexing\nin particular, rows accepts logical conditions\n\nLet’s try this (we truncate the table to the 1st, 9th, and 10th row):\n\nmy_cars[c(1,9,10),] |&gt; \n  gt() |&gt; \n  tab_footnote(\n      footnote  = \"One of the coolest car models ever built!\"\n    , locations = cells_body(\n                        columns = models               # ref to column\n                      , rows    = models == \"Merc 280\" # a logical condition\n                      )\n    ) |&gt; \n  tab_footnote(\n      footnote  = \"Six cylinders are two more than four\"\n    , locations = cells_body(columns = cyl, rows = cyl == 6) \n  )\n\n\n\n\n\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n1 6\n160.0\n110\n3.90\n2.62\n16.46\n0\n1\n4\n4\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.15\n22.90\n1\n0\n4\n2\n\n\nMerc 2802\n19.2\n1 6\n167.6\n123\n3.92\n3.44\n18.30\n1\n0\n4\n4\n\n\n\n1 Six cylinders are two more than four\n\n\n2 One of the coolest car models ever built!\n\n\n\n\n\n\n\n\nNote: similar to the layering of a ggplot, the order of the footnotes follows the last-on-top principle.\nThe aforementioned referencing allows to also highlight specific cells by formatting its presentation.\nFor the following we use tab_style() and the cell_fill() helper.\n\nmy_cars[c(1,9,10),] |&gt; \n  gt() |&gt; \n  tab_style(\n      locations = cells_body(columns = cyl, rows = cyl == 6)\n    , style     = cell_fill(color = \"green\")\n  )\n\n\n\n\n\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.62\n16.46\n0\n1\n4\n4\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.15\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.44\n18.30\n1\n0\n4\n4\n\n\n\n\n\n\n\n\n\n3.2.4 Theming {gt} tables - opt_stylize\n{gt} provides a set of pre-defined table style options.\nThese styles allow for (smaller) adaptations:\n\nstyle pick one of the pre-defined styles, currently 1 through 6, default is 1.\ncolor allows to select from a limited set of colors. There are six color variations: “blue”, “cyan”, “pink”, “green”, “red”, and “gray”.\n\n\nmy_cars[c(1,9,10),] |&gt; \n  gt() |&gt; \n  opt_stylize(style = 2, color = \"cyan\")\n\n\n\n\n\n\n\nmodels\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.62\n16.46\n0\n1\n4\n4\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.15\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.44\n18.30\n1\n0\n4\n4",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication-Ready Tables in R</span>"
    ]
  },
  {
    "objectID": "output.html",
    "href": "output.html",
    "title": "4  Communicate - Output",
    "section": "",
    "text": "4.1 Overview\nThroughout the past sessions we have implicitly rendered output to communicate our results. Quarto supports the production of a variety of documents in a reproducible manner.\nAuthoring Quarto-documents is done with (R)Markdown - a light-weight syntax around plein text 1.\nFrom a processing perspective, the input (a combination of text + code + visual elements) is “converted” to the different outputs formats. This process takes the input, interprets the R (or other code) to (pure) Markdown. Pandoc takes the markdown and converts it into the desired output format 2.\nFigure 4.1: Artwork by @allison_horst\nQuarto supports the creation of static and interactive content dependent on the chosen output format. This offers the opportunity to expand content beyond the classical categories of ‘report’/‘technical paper’ and can serve to establish interactive version of static reports, presentations, and dashboards.\nThis section provides a quick-step guide to/through",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  },
  {
    "objectID": "output.html#overview",
    "href": "output.html#overview",
    "title": "4  Communicate - Output",
    "section": "",
    "text": "(R)Markdown\nQuarto document structure and its YAML",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  },
  {
    "objectID": "output.html#a-fl300-look-at-a-document",
    "href": "output.html#a-fl300-look-at-a-document",
    "title": "4  Communicate - Output",
    "section": "4.2 A FL300 look at a “document”",
    "text": "4.2 A FL300 look at a “document”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.2: Example document\n\n\n\n\n\n\n\nA document consists of\n\ncontent\n\ntext, code, and visualisations\n\nstructure\n\nlayout\nparagraphs or other blocks of content\n\nappearance\n\nfonts, colour, etc.\n\nformat\n\noverall output and functionality (i.e. static, interactive)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.3: Document as a sequence of blocks\n\n\n\n\n\n\n\nThus, a document is a sequence (or list) of blocks that contain inline elements or other blocks. Such blocks and elements can be associated with metadata.\nA block element starts on a new line and is followed by an empty line. It forms an identifiable block.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  },
  {
    "objectID": "output.html#rmarkdown",
    "href": "output.html#rmarkdown",
    "title": "4  Communicate - Output",
    "section": "4.3 (R)Markdown",
    "text": "4.3 (R)Markdown\nThe philosphy behind (R)Markdown is to use plain text format that is easy to write and even easy to read. This reduces the cognitive load and allows to focus on the writing/editing.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  },
  {
    "objectID": "output.html#text-formatting",
    "href": "output.html#text-formatting",
    "title": "4  Communicate - Output",
    "section": "4.4 Text Formatting",
    "text": "4.4 Text Formatting\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\nThis is some creative text ...\n just type\n… well … I hope you are not expecting something here …. that would be different from what\n\nitalics, bold, bold italics\n\n\n*italics*, **bold**, ***bold italics***\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n[This text is underlined]{.underline}\nThis text is underlined\n\n\n\n\n\n\n\n\n\n(R)Markdown\n\n\nOutput\n\n\n\n\n\nhighlight text (italic, bold): *italic text* and **bold text**\n\n\n\nitalic text and bold text\n\n\n\n\n\nsuper- and subscript: superscript^up^ and subscript~down~\n\n\n\nsuperscriptup and subscriptdown\n\n\n\n\n\nunderline (using Pandoc): my [text to underline]{.underline}\n\n\n\nmy text to underline\n\n\n\n\n\nstrikethrough: ~~text stricken through~~\n\n\n\ntext stricken through",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  },
  {
    "objectID": "output.html#footnotes",
    "href": "output.html#footnotes",
    "title": "4  Communicate - Output",
    "section": "",
    "text": "Thus, conceptually, we can edit/author a Qmd-document in any text editor - which ensures long-term survivability. Rendering a Qmd-document, however, requires an environment in which the marked text is interpreted.↩︎\nIf you are interested in tinkering with pandoc, have fun at: https://pandoc.org/try/.↩︎",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Communicate - Output</span>"
    ]
  }
]